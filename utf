#include<iostream>
#include<string>
using namespace std;
class UTF {
	private:
		int Decimal, Dec, DecArray[100];
		int Binary[100];
		string Utf8;
		string Hex;
	public:
		void Input() {
			cout << "Irasykite norima desimtaini skaiciu...  " << endl;
			cin >> Decimal;
			DecimalToHex(Decimal);
		}
		void DecimalToBinary() {
			int i = 31;
			Dec = Decimal;
			while (Decimal != 1) {
				Binary[i] = Decimal % 2;
				Decimal = Decimal / 2;
				i--;
			}
			Binary[i] = 1;
			Limits();
		}
		void DecimalToHex(int n){ 
			char Hexx[100];
			int zeros = 0;
			int i = 0;
			while (n != 0){
				int temp = 0;
				temp = n % 16; 
				if (temp < 10){
					Hexx[i] = temp + 48;
					i++;
				}
				else{
					Hexx[i] = temp + 55;
					i++;
				}
				n = n / 16;
				
			}
			string HexTemp;
			for (int j = i - 1; j >= 0; j--) {
				HexTemp = HexTemp + Hexx[j];
			}
			if (HexTemp.length() <= 4) {
				zeros = 4 - HexTemp.length();
				while (zeros != 0) {
					Hex = Hex + "0";
					zeros--;
				}
			}
			Hex = Hex + HexTemp;
			system("CLS");
			cout <<"UNICODE: "<< "U+" << Hex << endl;
			char b = Decimal;
			cout << "CHAR: " << b << endl;
			DecimalToBinary();
		}
		void BinaryToHex(int size, int BinaryArray[]) {
			int Number = 0;
			string Hexa;
			int Spaces = 0;
			for (int i = 0; i < size; i=i+4) {
				Number = 0;
				Number += BinaryArray[i] * 1000;
				Number += BinaryArray[i+1] * 100;
				Number += BinaryArray[i+2] * 10;
				Number += BinaryArray[i+3] * 1;
				switch (Number) {
					case 0:	Hexa = "0";
						break;
					case 1: Hexa = "1";
						break;
					case 10: Hexa = "2";
						break;
					case 11: Hexa = "3";
						break;
					case 100: Hexa = "4";
						break;
					case 101: Hexa = "5";
						break;
					case 110: Hexa = "6";
						break;
					case 111: Hexa = "7";
						break;
					case 1000: Hexa = "8";
						break;
					case 1001: Hexa = "9";
						break;
					case 1010: Hexa = "A";
						break;
					case 1011: Hexa = "B";
						break;
					case 1100: Hexa = "C";
						break;
					case 1101: Hexa = "D";
						break;
					case 1110: Hexa = "E";
						break;
					case 1111: Hexa = "F";
						break;
				}
				Spaces++;
				Utf8 += Hexa;
				if (Spaces % 2 == 0) {
					Utf8 += " ";
				}
			}
			cout <<"UTF-8: "<< Utf8;
			int a;
			cout << endl;
			cout << endl;
			cout << "Jei norite grizti i pradzia, spauskite 1..." << endl;
			cout << "Jei norite iseiti, spauskite 2...." << endl;
			cin >> a;
			if (a == 1) {
				system("CLS");
				Input();
			}
			if (a == 2) {
				end();
			}
			
		}
		int end() {
			return 0;
		}
		void Limits() {
			if (Dec >= 0 && Dec <= 127) {
				int const size = 8;
				int BinaryArray[size];
				int ind = size - 1;
				int a = 31;
				while (ind > 0) {
					if (Binary[a] == 0 || Binary[a] == 1) {
						BinaryArray[ind] = Binary[a];
					}
					else {
						BinaryArray[ind] = 0;
					}
					a--;
					ind--;
				}
				BinaryArray[0] = 0;
				BinaryToHex(size, BinaryArray);
			}
			if (Dec >= 128 && Dec <= 2047) {
				int const size = 16;
				int BinaryArray[size];
				int ind = size - 1;
				int a = 31;
				while (ind >= 0) {
					switch (ind) {
					case 0: BinaryArray[ind] = 1;
						break;
					case 1: BinaryArray[ind] = 1;
						break;
					case 2: BinaryArray[ind] = 0;
						break;
					case 8: BinaryArray[ind] = 1;
						break;
					case 9: BinaryArray[ind] = 0;
						break;
					default:
						if (Binary[a] == 0 || Binary[a] == 1) {
							BinaryArray[ind] = Binary[a];
							a--;
						}
						else {
							BinaryArray[ind] = 0;
						}
					}
					ind--;
				}
				BinaryToHex(size, BinaryArray);
			}
			if (Dec >= 2048 && Dec <= 65535) {
				int const size = 24;
				int BinaryArray[size];
				int ind = size - 1;
				int a = 31;
				while (ind >= 0) {
					switch (ind) {
					case 0: BinaryArray[ind] = 1;
						break;
					case 1: BinaryArray[ind] = 1;
						break;
					case 2: BinaryArray[ind] = 1;
						break;
					case 3: BinaryArray[ind] = 0;
						break;
					case 8: BinaryArray[ind] = 1;
						break;
					case 9: BinaryArray[ind] = 0;
						break;
					case 16: BinaryArray[ind] = 1;
						break;
					case 17: BinaryArray[ind] = 0;
						break;
					default:
						if (Binary[a] == 0 || Binary[a] == 1) {
							BinaryArray[ind] = Binary[a];
							a--;
						}
						else {
							BinaryArray[ind] = 0;
						}
					}
					ind--;
				}
				BinaryToHex(size, BinaryArray);
			}
			if (Dec >= 65536 && Dec <= 1114111) {
				int const size = 32;
				int BinaryArray[size];
				int ind = size - 1;
				int a = 31;
				while (ind >= 0) {
					switch (ind) {
					case 0: BinaryArray[ind] = 1;
						break;
					case 1: BinaryArray[ind] = 1;
						break;
					case 2: BinaryArray[ind] = 1;
						break;
					case 3: BinaryArray[ind] = 1;
						break;
					case 4: BinaryArray[ind] = 0;
						break;
					case 8: BinaryArray[ind] = 1;
						break;
					case 9: BinaryArray[ind] = 0;
						break;
					case 16: BinaryArray[ind] = 1;
						break;
					case 17: BinaryArray[ind] = 0;
						break;
					case 24: BinaryArray[ind] = 1;
						break;
					case 25: BinaryArray[ind] = 0;
						break;
					default:
						if (Binary[a] == 0 || Binary[a] == 1) {
							BinaryArray[ind] = Binary[a];
							a--;
						}
						else {
							BinaryArray[ind] = 0;
						}
					}
					ind--;
				}
				BinaryToHex(size, BinaryArray);
			}
		}
};
int main() {
	UTF A;
	A.Input();
	return 0;
}
